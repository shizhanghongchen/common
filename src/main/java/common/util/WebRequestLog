
package common.aop;

import common.constans.Constants;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.ibatis.javassist.*;
import org.apache.ibatis.javassist.bytecode.CodeAttribute;
import org.apache.ibatis.javassist.bytecode.LocalVariableAttribute;
import org.apache.ibatis.javassist.bytecode.MethodInfo;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;

/**
 * Log web request params
 *
 * @author wb-yxk397023
 * @date 2018-05-29
 */
@Aspect
@Component
@Slf4j
public class WebRequestLog {
    private Logger logger = LoggerFactory.getLogger(WebRequestLog.class);

    /**
     * <li>Before       : 在方法执行前进行切面</li>
     * <li>execution    : 定义切面表达式</li>
     * <p>public * com.eparty.ccp.*.impl..*.*(..)
     * <li>public :匹配所有目标类的public方法，不写则匹配所有访问权限</li>
     * <li>第一个* :方法返回值类型，*代表所有类型 </li>
     * <li>第二个* :包路径的通配符</li>
     * <li>第三个..* :表示impl这个目录下所有的类，包括子目录的类</li>
     * <li>第四个*(..) : *表示所有任意方法名,..表示任意参数</li>
     * </p>
     *
     * @param point 切面
     */
    @Before("execution(public * com.aliyun.et.industry.studio..*Controller.*(..)) && !execution(* com.aliyun.et.industry.studio.web.controller.SystemController.*(..)) "
            + "&& !execution(* com.aliyun.et.industry.studio.web.controller.ApiCallController.reatTimeDataEntry(..))")
    public void before(JoinPoint point) {
        this.logMethodParams(point);
    }

    public void logMethodParams(JoinPoint joinPoint) {
        Class klass = joinPoint.getTarget().getClass();
        String className = klass.getName();
        String methodName = joinPoint.getSignature().getName();
        logger = LoggerFactory.getLogger(klass);
        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder
                .getRequestAttributes()).getRequest();
        String path = request.getRequestURI();
        if (path.equals(Constants.HEALTH_CHECK)) {
            return;
        }
        logger.info("********************** Web Request Log Begin **********************");
        logger.info("class name: " + className);
        logger.info("method name: " + methodName);

        Object[] methodArgs = joinPoint.getArgs();
        try {
            /**
             * 获取方法参数名称
             */
            String[] paramNames = getFieldsName(className, methodName);

            /**
             * 打印方法的参数名和参数值
             */
            logParam(paramNames, methodArgs);
            logger.info("********************** Web Request Log End **********************");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String[] getFieldsName(String className, String methodName) throws Exception {
        Class<?> klass = Class.forName(className);
        ClassPool pool = ClassPool.getDefault();
        ClassClassPath classPath = new ClassClassPath(klass);
        pool.insertClassPath(classPath);

        CtClass ctClass = pool.get(className);
        CtMethod ctMethod = ctClass.getDeclaredMethod(methodName);
        MethodInfo methodInfo = ctMethod.getMethodInfo();
        CodeAttribute codeAttribute = methodInfo.getCodeAttribute();
        LocalVariableAttribute attr = (LocalVariableAttribute) codeAttribute.getAttribute(LocalVariableAttribute.tag);
        if (attr == null) {
            return null;
        }
        String[] paramsArgsName = new String[ctMethod.getParameterTypes().length];
        int pos = Modifier.isStatic(ctMethod.getModifiers()) ? 0 : 1;
        for (int i = 0; i < paramsArgsName.length; i++) {
            paramsArgsName[i] = attr.variableName(i + pos);
        }
        return paramsArgsName;
    }

    /**
     * 判断是否为基本类型：包括String
     *
     * @param clazz clazz
     * @return true：是;     false：不是
     */
    private boolean isPrimitive(Class<?> clazz) {
        if (clazz.isPrimitive() || clazz == String.class) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * 打印方法参数值  基本类型直接打印，非基本类型需要重写toString方法
     *
     * @param paramsArgsName  方法参数名数组
     * @param paramsArgsValue 方法参数值数组
     */
    private void logParam(String[] paramsArgsName, Object[] paramsArgsValue) {
        if (ArrayUtils.isEmpty(paramsArgsName) || ArrayUtils.isEmpty(paramsArgsValue)) {
            logger.info("Method has no params");
            return;
        }
        StringBuffer buffer = new StringBuffer();
        for (int i = 0; i < paramsArgsName.length; i++) {
            //参数名
            String name = paramsArgsName[i];
            //参数值
            Object value = paramsArgsValue[i];
            buffer.append(name + " = ");
            if (null == value) {
                buffer.append("null, ");
            } else if (isPrimitive(value.getClass())) {
                buffer.append(value + " ,");
            } else {
                buffer.append(value.toString() + " ,");
            }
        }
        logger.info(buffer.toString());
    }
}

